{
	"name": "DF_Trans_Incr",
	"properties": {
		"folder": {
			"name": "SRC_STG"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_CSV_IN1685",
						"type": "DatasetReference"
					},
					"name": "SRCtransaction"
				},
				{
					"dataset": {
						"referenceName": "DS_CSV_IN1685",
						"type": "DatasetReference"
					},
					"name": "TGTtransactions"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_CSV_IN1685",
						"type": "DatasetReference"
					},
					"name": "SNKtransactions"
				}
			],
			"transformations": [
				{
					"name": "LEFTsrctgt"
				},
				{
					"name": "SELECTtgt"
				},
				{
					"name": "split1",
					"description": "incremental"
				},
				{
					"name": "AUDITcols"
				},
				{
					"name": "AGGRmaxdate"
				},
				{
					"name": "SELECTcols"
				},
				{
					"name": "UNIONstreams"
				}
			],
			"scriptLines": [
				"source(output(",
				"          TransactionID as integer,",
				"          AccountID as integer,",
				"          CustomerID as integer,",
				"          TransactionDate as date 'dd-MM-yyyy',",
				"          TransactionTime as timestamp,",
				"          TransactionType as string,",
				"          Amount as decimal(10,2),",
				"          BalanceAfterTransaction as decimal(10,2),",
				"          Currency as string,",
				"          Channel as string,",
				"          MerchantCode as string,",
				"          Location as string,",
				"          Fee as decimal(10,2),",
				"          ExchangeRate as decimal(10,2),",
				"          ApprovalCode as string,",
				"          FraudFlag as boolean,",
				"          Narration as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SRCtransaction",
				"source(output(",
				"          TransactionID as integer,",
				"          AccountID as string,",
				"          CustomerID as string,",
				"          TransactionDate as date,",
				"          TransactionTime as string,",
				"          TransactionType as string,",
				"          Amount as string,",
				"          BalanceAfterTransaction as string,",
				"          Currency as string,",
				"          Channel as string,",
				"          MerchantCode as string,",
				"          Location as string,",
				"          Fee as string,",
				"          ExchangeRate as string,",
				"          ApprovalCode as string,",
				"          FraudFlag as string,",
				"          Narration as string,",
				"          created_date as timestamp,",
				"          {created_by } as string,",
				"          updated_date as timestamp,",
				"          updated_by as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> TGTtransactions",
				"SRCtransaction, SELECTtgt join(TransactionID == T_TransactionID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> LEFTsrctgt",
				"AGGRmaxdate select(mapColumn(",
				"          T_TransactionID = TransactionID,",
				"          max_txn_date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SELECTtgt",
				"LEFTsrctgt split(isNull(T_TransactionID),",
				"     (TransactionID == T_TransactionID) && (TransactionDate > max_txn_date),",
				"     disjoint: true) ~> split1@(INSERTstream, UPDATEstream)",
				"UNIONstreams derive(created_date = currentTimestamp(),",
				"          created_by = toString('PL_Trans_Incr'),",
				"          updated_date = currentTimestamp(),",
				"          updated_by = toString('PL_Trans_Incr')) ~> AUDITcols",
				"TGTtransactions aggregate(groupBy(TransactionID),",
				"     max_txn_date = max(TransactionDate)) ~> AGGRmaxdate",
				"AUDITcols select(mapColumn(",
				"          TransactionID,",
				"          AccountID,",
				"          CustomerID,",
				"          TransactionDate,",
				"          TransactionTime,",
				"          TransactionType,",
				"          Amount,",
				"          BalanceAfterTransaction,",
				"          Currency,",
				"          Channel,",
				"          MerchantCode,",
				"          Location,",
				"          Fee,",
				"          ExchangeRate,",
				"          ApprovalCode,",
				"          FraudFlag,",
				"          Narration,",
				"          created_date,",
				"          created_by,",
				"          updated_date,",
				"          updated_by",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SELECTcols",
				"split1@INSERTstream, split1@UPDATEstream union(byName: true)~> UNIONstreams",
				"SELECTcols sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['mod_stg_transaction_IN1685.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SNKtransactions"
			]
		}
	}
}