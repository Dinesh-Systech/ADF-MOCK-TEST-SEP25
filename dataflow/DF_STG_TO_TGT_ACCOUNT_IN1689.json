{
	"name": "DF_STG_TO_TGT_ACCOUNT_IN1689",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_MODULE_TEST_IN1689",
						"type": "DatasetReference"
					},
					"name": "SRCaccount"
				},
				{
					"dataset": {
						"referenceName": "DS_SQL_SERVER_IN1689",
						"type": "DatasetReference"
					},
					"name": "SRaccount"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_MODULE_TEST_IN1689",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "SELECTaccount"
				},
				{
					"name": "LEFTJOIN"
				},
				{
					"name": "INSERT"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select2"
				},
				{
					"name": "select3"
				},
				{
					"name": "union1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          AccountID as short,",
				"          CustomerID as short,",
				"          AccountNumber as string,",
				"          AccountType as string,",
				"          OpenDate as date,",
				"          CloseDate as date,",
				"          Status as string,",
				"          BranchCode as string,",
				"          Currency as string,",
				"          InterestRate as double,",
				"          CreditLimit as double,",
				"          Balance as double,",
				"          OverdraftLimit as double,",
				"          IsJointAccount as boolean,",
				"          Channel as string,",
				"          LastActivityDate as date,",
				"          created_date as string,",
				"          created_by as string,",
				"          updated_date as string,",
				"          updated_by as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SRCaccount",
				"source(output(",
				"          TransactionID as integer,",
				"          AccountID as integer,",
				"          CustomerID as integer,",
				"          TransactionDate as date,",
				"          TransactionTime as timestamp,",
				"          TransactionType as string,",
				"          Amount as decimal(10,2),",
				"          BalanceAfterTransaction as decimal(10,2),",
				"          Currency as string,",
				"          Channel as string,",
				"          MerchantCode as string,",
				"          Location as string,",
				"          Fee as decimal(10,2),",
				"          ExchangeRate as decimal(10,2),",
				"          ApprovalCode as string,",
				"          FraudFlag as boolean,",
				"          Narration as string,",
				"          created_date as timestamp,",
				"          created_by as string,",
				"          updated_date as timestamp,",
				"          updated_by as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SRaccount",
				"SRCaccount select(skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SELECTaccount",
				"SELECTaccount join(ERROR_FUNCTION('') == ERROR_FUNCTION(''),",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> LEFTJOIN",
				"LEFTJOIN split(ERROR_FUNCTION(''),",
				"     disjoint: false) ~> INSERT@(INSERT, UPDATE)",
				"INSERT@INSERT derive() ~> derivedColumn1",
				"INSERT@UPDATE derive() ~> derivedColumn2",
				"derivedColumn1 select(skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"derivedColumn2 select(skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select2, select3 union(byName: true)~> union1",
				"union1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}