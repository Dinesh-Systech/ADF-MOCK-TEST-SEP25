{
	"name": "DF_Transaction_IN1674",
	"properties": {
		"folder": {
			"name": "SRC_to_STG"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_SourceCSV_IN1674",
						"type": "DatasetReference"
					},
					"name": "Srctransaction"
				},
				{
					"dataset": {
						"referenceName": "DS_SourceCSV_IN1674",
						"type": "DatasetReference"
					},
					"name": "Srccomparetable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_SourceCSV_IN1674",
						"type": "DatasetReference"
					},
					"name": "sinkTransaction"
				}
			],
			"transformations": [
				{
					"name": "Transformation"
				},
				{
					"name": "selectcolumnsrc"
				},
				{
					"name": "select1"
				},
				{
					"name": "LeftJoincomparetable"
				},
				{
					"name": "split1"
				},
				{
					"name": "LeftjoinFilter"
				},
				{
					"name": "Lastmmodifiedfilter"
				}
			],
			"scriptLines": [
				"parameters{",
				"     pipname as string",
				"}",
				"source(output(",
				"          TransactionID as integer,",
				"          AccountID as integer,",
				"          CustomerID as integer,",
				"          TransactionDate as date,",
				"          TransactionTime as timestamp,",
				"          TransactionType as string,",
				"          Amount as double,",
				"          BalanceAfterTransaction as double,",
				"          Currency as string,",
				"          Channel as string,",
				"          MerchantCode as string,",
				"          Location as string,",
				"          Fee as double,",
				"          ExchangeRate as double,",
				"          ApprovalCode as string,",
				"          FraudFlag as boolean,",
				"          Narration as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Srctransaction",
				"source(output(",
				"          TransactionID as short,",
				"          AccountID as short,",
				"          CustomerID as short,",
				"          TransactionDate as string,",
				"          TransactionTime as string,",
				"          TransactionType as string,",
				"          Amount as double,",
				"          BalanceAfterTransaction as double,",
				"          Currency as string,",
				"          Channel as string,",
				"          MerchantCode as string,",
				"          Location as string,",
				"          Fee as double,",
				"          ExchangeRate as double,",
				"          ApprovalCode as string,",
				"          FraudFlag as boolean,",
				"          Narration as string,",
				"          created_date as date,",
				"          {created_by } as string,",
				"          updated_date as date,",
				"          updated_by as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Srccomparetable",
				"Srctransaction derive({created date} = currentDate(),",
				"          {created by } = $pipname,",
				"          {updated date} = currentDate(),",
				"          {updated by} = $pipname) ~> Transformation",
				"Transformation select(mapColumn(",
				"          TransactionID,",
				"          AccountID,",
				"          CustomerID,",
				"          TransactionDate,",
				"          TransactionTime,",
				"          TransactionType,",
				"          Amount,",
				"          BalanceAfterTransaction,",
				"          Currency,",
				"          Channel,",
				"          MerchantCode,",
				"          Location,",
				"          Fee,",
				"          ExchangeRate,",
				"          ApprovalCode,",
				"          FraudFlag,",
				"          Narration,",
				"          created_date = {created date},",
				"          {created_by } = {created by },",
				"          updated_date = {updated date},",
				"          updated_by = {updated by}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectcolumnsrc",
				"Srccomparetable select(mapColumn(",
				"          TransactionID_src = TransactionID,",
				"          AccountID_src = AccountID,",
				"          CustomerID_src = CustomerID,",
				"          TransactionDate_src = TransactionDate,",
				"          TransactionTime_src = TransactionTime,",
				"          TransactionType_src = TransactionType,",
				"          Amount_src = Amount,",
				"          BalanceAfterTransaction_src = BalanceAfterTransaction,",
				"          Currency_src = Currency,",
				"          Channel_src = Channel,",
				"          MerchantCode_src = MerchantCode,",
				"          Location_src = Location,",
				"          Fee_src = Fee,",
				"          ExchangeRate_src = ExchangeRate,",
				"          ApprovalCode_src = ApprovalCode,",
				"          FraudFlag_src = FraudFlag,",
				"          Narration_src = Narration,",
				"          created_date_src = created_date,",
				"          {created_by _src} = {created_by },",
				"          updated_date_src = updated_date,",
				"          {updated_by-Src} = updated_by",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"selectcolumnsrc, select1 join(ERROR_FUNCTION('') == ERROR_FUNCTION(''),",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> LeftJoincomparetable",
				"LeftJoincomparetable split(TransactionID == TransactionID_src,",
				"     TransactionID != TransactionID_src,",
				"     disjoint: false) ~> split1@(currentvalue, update)",
				"split1@currentvalue, Lastmmodifiedfilter join(ERROR_FUNCTION('') == ERROR_FUNCTION(''),",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> LeftjoinFilter",
				"split1@update filter(endsWith($pipname, '.csv')) ~> Lastmmodifiedfilter",
				"LeftjoinFilter sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          AccountID as string,",
				"          CustomerID as string,",
				"          AccountNumber as string,",
				"          AccountType as string,",
				"          OpenDate as string,",
				"          CloseDate as string,",
				"          Status as string,",
				"          BranchCode as string,",
				"          Currency as string,",
				"          InterestRate as string,",
				"          CreditLimit as string,",
				"          Balance as string,",
				"          OverdraftLimit as string,",
				"          IsJointAccount as string,",
				"          Channel as string,",
				"          LastActivityDate as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkTransaction"
			]
		}
	}
}