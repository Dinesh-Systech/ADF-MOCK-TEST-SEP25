{
	"name": "DF_STG_Customers_TGT_IN1686",
	"properties": {
		"folder": {
			"name": "STG_TGT"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_CSV_IN1686",
						"type": "DatasetReference"
					},
					"name": "SRCCustomers"
				},
				{
					"dataset": {
						"referenceName": "DS_CSV_IN1686",
						"type": "DatasetReference"
					},
					"name": "TGTCustomers"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_CSV_IN1686",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select2"
				},
				{
					"name": "join1"
				},
				{
					"name": "split1"
				},
				{
					"name": "alterRowInsert"
				},
				{
					"name": "alterRowUpdate"
				},
				{
					"name": "auditColumnInsert"
				},
				{
					"name": "auditColumnUpdate"
				},
				{
					"name": "union1"
				},
				{
					"name": "HandlingNull"
				},
				{
					"name": "Transformations"
				},
				{
					"name": "select3"
				},
				{
					"name": "CustomerKey"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as integer,",
				"          FirstName as integer,",
				"          LastName as string,",
				"          Gender as string,",
				"          DateOfBirth as date,",
				"          Email as string,",
				"          Phone as string,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          City as string,",
				"          State as string,",
				"          Country as string,",
				"          PostalCode as integer,",
				"          MaritalStatus as string,",
				"          Occupation as string,",
				"          AnnualIncome as double,",
				"          RiskCategory as string,",
				"          created_by as string,",
				"          created_date as string,",
				"          update_by as string,",
				"          update_date as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SRCCustomers",
				"source(output(",
				"          CustomerID as integer,",
				"          customer_key as integer,",
				"          FirstName as string,",
				"          LastName as string,",
				"          FullName as string,",
				"          Gender as string,",
				"          DateOfBirth as string,",
				"          Age as string,",
				"          Email as string,",
				"          Phone as string,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          City as string,",
				"          State as string,",
				"          Country as string,",
				"          PostalCode as string,",
				"          MaritalStatus as string,",
				"          Occupation as string,",
				"          Sector as string,",
				"          AnnualIncome as string,",
				"          RiskCategory as string,",
				"          created_by as string,",
				"          created_date as string,",
				"          updated_date as string,",
				"          updated_by as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> TGTCustomers",
				"TGTCustomers select(skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"SRCCustomers, select2 join(SRCCustomers@CustomerID == ERROR_FUNCTION(''),",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 split(ERROR_FUNCTION(''),",
				"     disjoint: false) ~> split1@(Insert, Update)",
				"split1@Insert alterRow() ~> alterRowInsert",
				"split1@Update alterRow() ~> alterRowUpdate",
				"alterRowInsert derive() ~> auditColumnInsert",
				"alterRowUpdate derive() ~> auditColumnUpdate",
				"auditColumnInsert, auditColumnUpdate union(byName: true)~> union1",
				"union1 derive() ~> HandlingNull",
				"HandlingNull derive() ~> Transformations",
				"CustomerKey select(skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"Transformations keyGenerate(output({undefined} as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> CustomerKey",
				"select3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[''],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}