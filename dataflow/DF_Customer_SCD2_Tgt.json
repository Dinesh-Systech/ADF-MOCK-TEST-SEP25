{
	"name": "DF_Customer_SCD2_Tgt",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_BLOB_IN1677",
						"type": "DatasetReference"
					},
					"name": "SrcCustomer"
				},
				{
					"dataset": {
						"referenceName": "DS_BLOB_IN1677",
						"type": "DatasetReference"
					},
					"name": "TgtCustomer"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "selectColumns1"
				},
				{
					"name": "SelectColumns2"
				},
				{
					"name": "joinSrcTgt"
				},
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as integer,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Gender as string,",
				"          DateOfBirth as date,",
				"          Email as string,",
				"          Phone as string,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          City as string,",
				"          State as string,",
				"          Country as string,",
				"          PostalCode as integer,",
				"          MaritalStatus as string,",
				"          Occupation as string,",
				"          AnnualIncome as double,",
				"          RiskCategory as string,",
				"          {created_by } as string,",
				"          created_date as timestamp,",
				"          updated_date as string,",
				"          updated_by as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SrcCustomer",
				"source(output(",
				"          CustomerID as integer,",
				"          customer_key as integer,",
				"          FirstName as string,",
				"          LastName as string,",
				"          FullName as string,",
				"          Gender as string,",
				"          DateOfBirth as date,",
				"          Age as string,",
				"          Email as string,",
				"          Phone as string,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          City as string,",
				"          State as string,",
				"          Country as string,",
				"          PostalCode as integer,",
				"          MaritalStatus as string,",
				"          Occupation as string,",
				"          Sector as string,",
				"          AnnualIncome as double,",
				"          RiskCategory as string,",
				"          created_by as string,",
				"          created_date as timestamp,",
				"          updated_date as timestamp,",
				"          updated_by as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> TgtCustomer",
				"SrcCustomer select(mapColumn(",
				"          CustomerID,",
				"          FirstName,",
				"          LastName,",
				"          Gender,",
				"          DateOfBirth,",
				"          Email,",
				"          Phone,",
				"          AddressLine1,",
				"          AddressLine2,",
				"          City,",
				"          State,",
				"          Country,",
				"          PostalCode,",
				"          MaritalStatus,",
				"          Occupation,",
				"          AnnualIncome,",
				"          RiskCategory,",
				"          {created_by },",
				"          created_date,",
				"          updated_date,",
				"          updated_by",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumns1",
				"TgtCustomer select(mapColumn(",
				"          each(match(true()),",
				"               'tgt_'+$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectColumns2",
				"selectColumns1, SelectColumns2 join(CustomerID == tgt_CustomerID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinSrcTgt",
				"joinSrcTgt split(isNull(tgt_CustomerID)||(CustomerID==tgt_CustomerID && State!=tgt_State ),",
				"     (CustomerID==tgt_CustomerID && State!=tgt_State ),",
				"     disjoint: false) ~> split1@(insert, update)"
			]
		}
	}
}